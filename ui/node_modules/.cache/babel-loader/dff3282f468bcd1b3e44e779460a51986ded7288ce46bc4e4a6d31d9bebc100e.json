{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\shadow\\\\Documents\\\\cursor\\\\aigm\\\\ui\\\\src\\\\components\\\\Message.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * Message component for displaying chat messages with appropriate styling based on type\n * Supports Markdown rendering for enhanced content display\n */\nconst Message = ({\n  type,\n  content,\n  timestamp,\n  sender,\n  isLoading = false\n}) => {\n  _s();\n  // For animating the typing indicator\n  const [dots, setDots] = useState('.');\n\n  // Animate the typing indicator when loading\n  useEffect(() => {\n    if (!isLoading) return;\n    const interval = setInterval(() => {\n      setDots(prevDots => {\n        if (prevDots.length >= 3) return '.';\n        return prevDots + '.';\n      });\n    }, 500);\n    return () => clearInterval(interval);\n  }, [isLoading]);\n\n  // Get message style accent color based on type\n  const getAccentColor = () => {\n    const typePrefix = type.split('-')[0]; // 'admin', 'ooc', or 'ic'\n    const typeSuffix = type.split('-')[1]; // 'user', 'player', or 'ai'\n    return `var(--${type}-primary)`;\n  };\n\n  // Get message icon based on context\n  const getMessageIcon = () => {\n    const typeSuffix = type.split('-')[1]; // 'user', 'player', or 'ai'\n    if (typeSuffix === 'ai') {\n      return 'ðŸ¤–';\n    } else if (type === 'admin-user') {\n      return 'ðŸ”§';\n    } else {\n      return 'ðŸ‘¤';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${type}-message fade-in`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-header\",\n      style: {\n        borderBottom: `1px solid ${getAccentColor()}`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sender\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-icon\",\n          \"aria-hidden\": \"true\",\n          children: getMessageIcon()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), sender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"timestamp\",\n        children: new Date(timestamp).toLocaleTimeString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-content\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Message, \"DhAt7yQCY8ATyOObTYFQf1q3nps=\");\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["React","useEffect","useState","ReactMarkdown","jsxDEV","_jsxDEV","Message","type","content","timestamp","sender","isLoading","_s","dots","setDots","interval","setInterval","prevDots","length","clearInterval","getAccentColor","typePrefix","split","typeSuffix","getMessageIcon","className","children","style","borderBottom","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleTimeString","_c","$RefreshReg$"],"sources":["C:/users/shadow/Documents/cursor/aigm/ui/src/components/Message.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { MessageType } from '../types/chat';\n\ninterface MessageProps {\n  type: MessageType;\n  content: string;\n  timestamp: number;\n  sender: string;\n  isLoading?: boolean;\n}\n\n/**\n * Message component for displaying chat messages with appropriate styling based on type\n * Supports Markdown rendering for enhanced content display\n */\nconst Message: React.FC<MessageProps> = ({ \n  type, \n  content, \n  timestamp, \n  sender, \n  isLoading = false \n}) => {\n  // For animating the typing indicator\n  const [dots, setDots] = useState('.');\n  \n  // Animate the typing indicator when loading\n  useEffect(() => {\n    if (!isLoading) return;\n    \n    const interval = setInterval(() => {\n      setDots(prevDots => {\n        if (prevDots.length >= 3) return '.';\n        return prevDots + '.';\n      });\n    }, 500);\n    \n    return () => clearInterval(interval);\n  }, [isLoading]);\n\n  // Get message style accent color based on type\n  const getAccentColor = () => {\n    const typePrefix = type.split('-')[0]; // 'admin', 'ooc', or 'ic'\n    const typeSuffix = type.split('-')[1]; // 'user', 'player', or 'ai'\n    return `var(--${type}-primary)`;\n  };\n\n  // Get message icon based on context\n  const getMessageIcon = () => {\n    const typeSuffix = type.split('-')[1]; // 'user', 'player', or 'ai'\n    if (typeSuffix === 'ai') {\n      return 'ðŸ¤–';\n    } else if (type === 'admin-user') {\n      return 'ðŸ”§';\n    } else {\n      return 'ðŸ‘¤';\n    }\n  };\n\n  return (\n    <div className={`message ${type}-message fade-in`}>\n      <div className=\"message-header\" style={{ borderBottom: `1px solid ${getAccentColor()}` }}>\n        <span className=\"sender\">\n          <span className=\"message-icon\" aria-hidden=\"true\">{getMessageIcon()}</span>\n          {sender}\n        </span>\n        <span className=\"timestamp\">\n          {new Date(timestamp).toLocaleTimeString()}\n        </span>\n      </div>\n      \n      <div className=\"message-content\">\n        {isLoading ? (\n          <div className=\"typing-indicator\">\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n          </div>\n        ) : (\n          <ReactMarkdown>{content}</ReactMarkdown>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}