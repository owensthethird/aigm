{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadow\\\\Documents\\\\Cursor\\\\aiGM\\\\ui\\\\src\\\\components\\\\ProviderStatus.tsx\";\nimport React from 'react';\nimport StatusIndicator from './StatusIndicator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * Component to display the status of AI providers and allow selection\n * Shows connection state using the color system from our design\n */\nconst ProviderStatus = ({\n  providers = [],\n  onProviderSelect\n}) => {\n  // Get active provider (if any)\n  const activeProvider = providers.find(p => p.isActive);\n\n  // Map provider status to status indicator type\n  const getStatusType = status => {\n    switch (status) {\n      case 'healthy':\n        return 'success';\n      case 'connecting':\n        return 'processing';\n      case 'unhealthy':\n        return 'error';\n      default:\n        return 'idle';\n    }\n  };\n\n  // Get provider icon based on type\n  const getProviderIcon = type => {\n    switch (type) {\n      case 'ollama':\n        return 'ðŸ¦™';\n      // Llama icon for Ollama\n      case 'lmstudio':\n        return 'ðŸ§ª';\n      // Lab flask for LM Studio\n      case 'openai':\n        return 'âœ¨';\n      // Sparkles for OpenAI\n      default:\n        return 'ðŸ¤–';\n      // Robot for unknown\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"provider-status-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"provider-status-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"AI Providers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), activeProvider && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"active-provider\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"provider-label\",\n          children: \"Active:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"provider-name\",\n          children: [getProviderIcon(activeProvider.type), activeProvider.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatusIndicator, {\n          type: getStatusType(activeProvider.status),\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"provider-list\",\n      children: providers.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-providers\",\n        children: \"No AI providers configured\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this) : providers.map(provider => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `provider-item ${provider.isActive ? 'active' : ''}`,\n        onClick: () => onProviderSelect && onProviderSelect(provider.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"provider-icon\",\n          children: getProviderIcon(provider.type)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"provider-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"provider-name\",\n            children: provider.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"provider-type\",\n            children: provider.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(StatusIndicator, {\n          type: getStatusType(provider.status),\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)]\n      }, provider.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c = ProviderStatus;\nexport default ProviderStatus;\nvar _c;\n$RefreshReg$(_c, \"ProviderStatus\");","map":{"version":3,"names":["React","StatusIndicator","jsxDEV","_jsxDEV","ProviderStatus","providers","onProviderSelect","activeProvider","find","p","isActive","getStatusType","status","getProviderIcon","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","size","length","map","provider","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/Shadow/Documents/Cursor/aiGM/ui/src/components/ProviderStatus.tsx"],"sourcesContent":["import React from 'react';\nimport StatusIndicator from './StatusIndicator';\n\nexport interface ProviderInfo {\n  id: string;\n  name: string;\n  status: 'healthy' | 'unhealthy' | 'connecting' | 'disconnected';\n  isActive: boolean;\n  type: 'ollama' | 'lmstudio' | 'openai' | 'unknown';\n}\n\ninterface ProviderStatusProps {\n  providers: ProviderInfo[];\n  onProviderSelect?: (providerId: string) => void;\n}\n\n/**\n * Component to display the status of AI providers and allow selection\n * Shows connection state using the color system from our design\n */\nconst ProviderStatus: React.FC<ProviderStatusProps> = ({ \n  providers = [],\n  onProviderSelect\n}) => {\n  // Get active provider (if any)\n  const activeProvider = providers.find(p => p.isActive);\n  \n  // Map provider status to status indicator type\n  const getStatusType = (status: ProviderInfo['status']) => {\n    switch (status) {\n      case 'healthy': return 'success';\n      case 'connecting': return 'processing';\n      case 'unhealthy': return 'error';\n      default: return 'idle';\n    }\n  };\n\n  // Get provider icon based on type\n  const getProviderIcon = (type: ProviderInfo['type']) => {\n    switch (type) {\n      case 'ollama': return 'ðŸ¦™'; // Llama icon for Ollama\n      case 'lmstudio': return 'ðŸ§ª'; // Lab flask for LM Studio\n      case 'openai': return 'âœ¨'; // Sparkles for OpenAI\n      default: return 'ðŸ¤–'; // Robot for unknown\n    }\n  };\n\n  return (\n    <div className=\"provider-status-container\">\n      <div className=\"provider-status-header\">\n        <h4>AI Providers</h4>\n        {activeProvider && (\n          <div className=\"active-provider\">\n            <span className=\"provider-label\">Active:</span>\n            <span className=\"provider-name\">\n              {getProviderIcon(activeProvider.type)}\n              {activeProvider.name}\n            </span>\n            <StatusIndicator type={getStatusType(activeProvider.status)} size=\"small\" />\n          </div>\n        )}\n      </div>\n      \n      <div className=\"provider-list\">\n        {providers.length === 0 ? (\n          <div className=\"no-providers\">No AI providers configured</div>\n        ) : (\n          providers.map(provider => (\n            <div \n              key={provider.id}\n              className={`provider-item ${provider.isActive ? 'active' : ''}`}\n              onClick={() => onProviderSelect && onProviderSelect(provider.id)}\n            >\n              <div className=\"provider-icon\">{getProviderIcon(provider.type)}</div>\n              <div className=\"provider-details\">\n                <div className=\"provider-name\">{provider.name}</div>\n                <div className=\"provider-type\">{provider.type}</div>\n              </div>\n              <StatusIndicator type={getStatusType(provider.status)} size=\"small\" />\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProviderStatus;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}