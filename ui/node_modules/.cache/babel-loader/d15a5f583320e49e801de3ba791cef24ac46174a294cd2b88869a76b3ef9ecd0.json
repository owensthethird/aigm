{"ast":null,"code":"var _ChatService;\nimport axios from 'axios';\n/**\n * Service for handling chat-related API requests\n */\nclass ChatService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3000/api';\n  } // Private constructor for singleton pattern\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance() {\n    if (!ChatService.instance) {\n      ChatService.instance = new ChatService();\n    }\n    return ChatService.instance;\n  }\n\n  /**\n   * Set the base URL for API requests\n   */\n  setBaseUrl(url) {\n    this.baseUrl = url;\n  }\n\n  /**\n   * Get chat message history\n   * @param limit Maximum number of messages to retrieve\n   * @param before Timestamp to get messages before\n   * @param contextType Optional context type filter (ic, ooc, admin)\n   */\n  async getMessages(limit = 50, before, contextType) {\n    try {\n      const params = {\n        limit,\n        before,\n        contextType\n      };\n      const response = await axios.get(`${this.baseUrl}/messages`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a new chat message\n   * @param content Message content\n   * @param type Message type\n   */\n  async sendMessage(content, type) {\n    try {\n      const message = {\n        content,\n        type,\n        timestamp: Date.now(),\n        sender: 'Player'\n      };\n      const response = await axios.post(`${this.baseUrl}/messages`, message);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available message context types\n   * Returns the available context types (ic, ooc, admin)\n   */\n  async getMessageContexts() {\n    try {\n      const response = await axios.get(`${this.baseUrl}/contexts`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching message contexts:', error);\n      // Return default contexts if API fails\n      return [{\n        id: 'admin',\n        name: 'Admin'\n      }, {\n        id: 'ooc',\n        name: 'Out-of-Character'\n      }, {\n        id: 'ic',\n        name: 'In-Character'\n      }];\n    }\n  }\n\n  /**\n   * Clear chat history\n   * Deletes all messages in the current chat session\n   */\n  async clearChat() {\n    try {\n      await axios.delete(`${this.baseUrl}/messages`);\n    } catch (error) {\n      console.error('Error clearing chat history:', error);\n      throw error;\n    }\n  }\n}\n_ChatService = ChatService;\nChatService.instance = void 0;\nexport default ChatService;","map":{"version":3,"names":["axios","ChatService","constructor","baseUrl","getInstance","instance","setBaseUrl","url","getMessages","limit","before","contextType","params","response","get","data","error","console","sendMessage","content","type","message","timestamp","Date","now","sender","post","getMessageContexts","id","name","clearChat","delete","_ChatService"],"sources":["C:/Users/Shadow/Documents/Cursor/aiGM/ui/src/services/ChatService.ts"],"sourcesContent":["import axios from 'axios';\nimport { ChatMessage, MessageType } from '../types/chat';\n\n/**\n * Service for handling chat-related API requests\n */\nclass ChatService {\n  private static instance: ChatService;\n  private baseUrl: string = 'http://localhost:3000/api';\n\n  private constructor() {\n    // Private constructor for singleton pattern\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): ChatService {\n    if (!ChatService.instance) {\n      ChatService.instance = new ChatService();\n    }\n    return ChatService.instance;\n  }\n\n  /**\n   * Set the base URL for API requests\n   */\n  public setBaseUrl(url: string): void {\n    this.baseUrl = url;\n  }\n\n  /**\n   * Get chat message history\n   * @param limit Maximum number of messages to retrieve\n   * @param before Timestamp to get messages before\n   * @param contextType Optional context type filter (ic, ooc, admin)\n   */\n  public async getMessages(\n    limit: number = 50,\n    before?: number,\n    contextType?: 'ic' | 'ooc' | 'admin'\n  ): Promise<ChatMessage[]> {\n    try {\n      const params = { limit, before, contextType };\n      const response = await axios.get(`${this.baseUrl}/messages`, { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a new chat message\n   * @param content Message content\n   * @param type Message type\n   */\n  public async sendMessage(\n    content: string,\n    type: MessageType\n  ): Promise<ChatMessage> {\n    try {\n      const message = {\n        content,\n        type,\n        timestamp: Date.now(),\n        sender: 'Player'\n      };\n      \n      const response = await axios.post(`${this.baseUrl}/messages`, message);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available message context types\n   * Returns the available context types (ic, ooc, admin)\n   */\n  public async getMessageContexts(): Promise<{ id: string; name: string; }[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/contexts`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching message contexts:', error);\n      // Return default contexts if API fails\n      return [\n        { id: 'admin', name: 'Admin' },\n        { id: 'ooc', name: 'Out-of-Character' },\n        { id: 'ic', name: 'In-Character' }\n      ];\n    }\n  }\n\n  /**\n   * Clear chat history\n   * Deletes all messages in the current chat session\n   */\n  public async clearChat(): Promise<void> {\n    try {\n      await axios.delete(`${this.baseUrl}/messages`);\n    } catch (error) {\n      console.error('Error clearing chat history:', error);\n      throw error;\n    }\n  }\n}\n\nexport default ChatService;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EAIRC,WAAWA,CAAA,EAAG;IAAA,KAFdC,OAAO,GAAW,2BAA2B;EAIrD,CAAC,CADC;;EAGF;AACF;AACA;EACE,OAAcC,WAAWA,CAAA,EAAgB;IACvC,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE;MACzBJ,WAAW,CAACI,QAAQ,GAAG,IAAIJ,WAAW,CAAC,CAAC;IAC1C;IACA,OAAOA,WAAW,CAACI,QAAQ;EAC7B;;EAEA;AACF;AACA;EACSC,UAAUA,CAACC,GAAW,EAAQ;IACnC,IAAI,CAACJ,OAAO,GAAGI,GAAG;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAaC,WAAWA,CACtBC,KAAa,GAAG,EAAE,EAClBC,MAAe,EACfC,WAAoC,EACZ;IACxB,IAAI;MACF,MAAMC,MAAM,GAAG;QAAEH,KAAK;QAAEC,MAAM;QAAEC;MAAY,CAAC;MAC7C,MAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAG,IAAI,CAACX,OAAO,WAAW,EAAE;QAAES;MAAO,CAAC,CAAC;MACxE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAaE,WAAWA,CACtBC,OAAe,EACfC,IAAiB,EACK;IACtB,IAAI;MACF,MAAMC,OAAO,GAAG;QACdF,OAAO;QACPC,IAAI;QACJE,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACrBC,MAAM,EAAE;MACV,CAAC;MAED,MAAMZ,QAAQ,GAAG,MAAMb,KAAK,CAAC0B,IAAI,CAAC,GAAG,IAAI,CAACvB,OAAO,WAAW,EAAEkB,OAAO,CAAC;MACtE,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAaW,kBAAkBA,CAAA,EAA6C;IAC1E,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAG,IAAI,CAACX,OAAO,WAAW,CAAC;MAC5D,OAAOU,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD;MACA,OAAO,CACL;QAAEY,EAAE,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAQ,CAAC,EAC9B;QAAED,EAAE,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAmB,CAAC,EACvC;QAAED,EAAE,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAe,CAAC,CACnC;IACH;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAaC,SAASA,CAAA,EAAkB;IACtC,IAAI;MACF,MAAM9B,KAAK,CAAC+B,MAAM,CAAC,GAAG,IAAI,CAAC5B,OAAO,WAAW,CAAC;IAChD,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF;AAACgB,YAAA,GAtGK/B,WAAW;AAAXA,WAAW,CACAI,QAAQ;AAuGzB,eAAeJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}