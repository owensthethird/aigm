{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadow\\\\Documents\\\\Cursor\\\\aiGM\\\\ui\\\\src\\\\contexts\\\\ApiContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApiContext = /*#__PURE__*/createContext(undefined);\nexport const ApiProvider = ({\n  children\n}) => {\n  _s();\n  const [apiKey, setApiKey] = useState(() => {\n    // Try to get from localStorage first\n    const savedKey = localStorage.getItem('aigm-api-key');\n    return savedKey || '';\n  });\n  const [baseUrl, setBaseUrl] = useState(() => {\n    // Try to get from localStorage first\n    const savedUrl = localStorage.getItem('aigm-base-url');\n    return savedUrl || 'http://localhost:5678';\n  });\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Create API client with axios\n  const apiClient = axios.create({\n    baseURL: baseUrl,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-N8N-API-KEY': apiKey\n    }\n  });\n\n  // Save API key to localStorage when it changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('aigm-api-key', apiKey);\n    }\n  }, [apiKey]);\n\n  // Save base URL to localStorage when it changes\n  useEffect(() => {\n    if (baseUrl) {\n      localStorage.setItem('aigm-base-url', baseUrl);\n    }\n  }, [baseUrl]);\n\n  // Check connection status when apiKey or baseUrl changes\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (!apiKey || !baseUrl) {\n        setIsConnected(false);\n        return;\n      }\n      try {\n        const response = await apiClient.get('/api/v1/workflows');\n        setIsConnected(response.status === 200);\n      } catch (error) {\n        console.error('API connection error:', error);\n        setIsConnected(false);\n      }\n    };\n    checkConnection();\n  }, [apiKey, baseUrl, apiClient]);\n  return /*#__PURE__*/_jsxDEV(ApiContext.Provider, {\n    value: {\n      apiClient,\n      isConnected,\n      apiKey,\n      setApiKey,\n      baseUrl,\n      setBaseUrl\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(ApiProvider, \"2zppHxz5ggV8lNleSb8X50ai3I8=\");\n_c = ApiProvider;\nexport const useApi = () => {\n  _s2();\n  const context = useContext(ApiContext);\n  if (context === undefined) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n_s2(useApi, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ApiProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","ApiContext","undefined","ApiProvider","children","_s","apiKey","setApiKey","savedKey","localStorage","getItem","baseUrl","setBaseUrl","savedUrl","isConnected","setIsConnected","apiClient","create","baseURL","headers","setItem","checkConnection","response","get","status","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApi","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Shadow/Documents/Cursor/aiGM/ui/src/contexts/ApiContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';\nimport axios, { AxiosInstance } from 'axios';\n\ninterface ApiContextType {\n  apiClient: AxiosInstance;\n  isConnected: boolean;\n  apiKey: string;\n  setApiKey: (key: string) => void;\n  baseUrl: string;\n  setBaseUrl: (url: string) => void;\n}\n\nconst ApiContext = createContext<ApiContextType | undefined>(undefined);\n\ninterface ApiProviderProps {\n  children: ReactNode;\n}\n\nexport const ApiProvider: React.FC<ApiProviderProps> = ({ children }) => {\n  const [apiKey, setApiKey] = useState<string>(() => {\n    // Try to get from localStorage first\n    const savedKey = localStorage.getItem('aigm-api-key');\n    return savedKey || '';\n  });\n  \n  const [baseUrl, setBaseUrl] = useState<string>(() => {\n    // Try to get from localStorage first\n    const savedUrl = localStorage.getItem('aigm-base-url');\n    return savedUrl || 'http://localhost:5678';\n  });\n  \n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  \n  // Create API client with axios\n  const apiClient = axios.create({\n    baseURL: baseUrl,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-N8N-API-KEY': apiKey,\n    },\n  });\n  \n  // Save API key to localStorage when it changes\n  useEffect(() => {\n    if (apiKey) {\n      localStorage.setItem('aigm-api-key', apiKey);\n    }\n  }, [apiKey]);\n  \n  // Save base URL to localStorage when it changes\n  useEffect(() => {\n    if (baseUrl) {\n      localStorage.setItem('aigm-base-url', baseUrl);\n    }\n  }, [baseUrl]);\n  \n  // Check connection status when apiKey or baseUrl changes\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (!apiKey || !baseUrl) {\n        setIsConnected(false);\n        return;\n      }\n      \n      try {\n        const response = await apiClient.get('/api/v1/workflows');\n        setIsConnected(response.status === 200);\n      } catch (error) {\n        console.error('API connection error:', error);\n        setIsConnected(false);\n      }\n    };\n    \n    checkConnection();\n  }, [apiKey, baseUrl, apiClient]);\n\n  return (\n    <ApiContext.Provider value={{\n      apiClient,\n      isConnected,\n      apiKey,\n      setApiKey,\n      baseUrl,\n      setBaseUrl\n    }}>\n      {children}\n    </ApiContext.Provider>\n  );\n};\n\nexport const useApi = (): ApiContextType => {\n  const context = useContext(ApiContext);\n  if (context === undefined) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}