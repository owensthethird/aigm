{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\shadow\\\\Documents\\\\cursor\\\\aigm\\\\ui\\\\src\\\\contexts\\\\WebSocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport WebSocketService from '../services/WebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with a default value\nconst WebSocketContext = /*#__PURE__*/createContext({\n  status: 'disconnected',\n  sendMessage: () => {},\n  messages: [],\n  providerStatus: [],\n  clearMessages: () => {}\n});\n/**\n * WebSocket context provider for managing real-time communication\n * Provides connection status, message history, and methods to interact with the WebSocket\n */\nexport const WebSocketProvider = ({\n  children,\n  serverUrl = 'http://localhost:3000'\n}) => {\n  _s();\n  // Get the websocket service instance\n  const wsService = WebSocketService.getInstance();\n\n  // State for connection status and messages\n  const [status, setStatus] = useState('disconnected');\n  const [messages, setMessages] = useState([]);\n  const [providerStatus, setProviderStatus] = useState([]);\n\n  // Initialize the websocket connection\n  useEffect(() => {\n    // Initialize the WebSocket service\n    wsService.init(serverUrl);\n\n    // Subscribe to connection status updates\n    const statusUnsubscribe = wsService.subscribeToStatus(newStatus => {\n      setStatus(newStatus);\n    });\n\n    // Subscribe to messages\n    const messageUnsubscribe = wsService.subscribeToMessages(message => {\n      if (message.type === 'message' || message.type === 'system' || message.type === 'error') {\n        setMessages(prev => [...prev, message]);\n      } else if (message.type === 'provider_status') {\n        // Update provider status\n        const update = message.payload;\n        setProviderStatus(prev => {\n          const existingIndex = prev.findIndex(p => p.providerId === update.providerId);\n          if (existingIndex >= 0) {\n            const updatedList = [...prev];\n            updatedList[existingIndex] = update;\n            return updatedList;\n          } else {\n            return [...prev, update];\n          }\n        });\n      }\n      // Note: 'typing' events are handled directly by components that need them\n    });\n\n    // Cleanup on unmount\n    return () => {\n      statusUnsubscribe();\n      messageUnsubscribe();\n      wsService.disconnect();\n    };\n  }, [serverUrl]);\n\n  // Function to send a message through the WebSocket\n  const sendMessage = (eventName, data) => {\n    // Create message object with type and data\n    const message = {\n      type: eventName,\n      data: data\n    };\n    wsService.sendMessage(message);\n  };\n\n  // Function to clear message history\n  const clearMessages = () => {\n    setMessages([]);\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: {\n      status,\n      sendMessage,\n      messages,\n      providerStatus,\n      clearMessages\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * Custom hook for consuming the WebSocket context\n */\n_s(WebSocketProvider, \"32tZzFYaJZU1Y57g5HHHq/RoYEo=\");\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  return useContext(WebSocketContext);\n};\n_s2(useWebSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default WebSocketContext;\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","WebSocketService","jsxDEV","_jsxDEV","WebSocketContext","status","sendMessage","messages","providerStatus","clearMessages","WebSocketProvider","children","serverUrl","_s","wsService","getInstance","setStatus","setMessages","setProviderStatus","init","statusUnsubscribe","subscribeToStatus","newStatus","messageUnsubscribe","subscribeToMessages","message","type","prev","update","payload","existingIndex","findIndex","p","providerId","updatedList","disconnect","eventName","data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","$RefreshReg$"],"sources":["C:/users/shadow/Documents/cursor/aigm/ui/src/contexts/WebSocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport WebSocketService, { \n  ConnectionStatus, \n  WebSocketMessage,\n  ProviderStatusUpdate\n} from '../services/WebSocketService';\n\ninterface WebSocketContextType {\n  status: ConnectionStatus;\n  sendMessage: (eventName: string, data: any) => void;\n  messages: WebSocketMessage[];\n  providerStatus: ProviderStatusUpdate[];\n  clearMessages: () => void;\n}\n\n// Create the context with a default value\nconst WebSocketContext = createContext<WebSocketContextType>({\n  status: 'disconnected',\n  sendMessage: () => {},\n  messages: [],\n  providerStatus: [],\n  clearMessages: () => {}\n});\n\ninterface WebSocketProviderProps {\n  children: ReactNode;\n  serverUrl?: string;\n}\n\n/**\n * WebSocket context provider for managing real-time communication\n * Provides connection status, message history, and methods to interact with the WebSocket\n */\nexport const WebSocketProvider = ({ \n  children, \n  serverUrl = 'http://localhost:3000' \n}: WebSocketProviderProps) => {\n  // Get the websocket service instance\n  const wsService = WebSocketService.getInstance();\n  \n  // State for connection status and messages\n  const [status, setStatus] = useState<ConnectionStatus>('disconnected');\n  const [messages, setMessages] = useState<WebSocketMessage[]>([]);\n  const [providerStatus, setProviderStatus] = useState<ProviderStatusUpdate[]>([]);\n\n  // Initialize the websocket connection\n  useEffect(() => {\n    // Initialize the WebSocket service\n    wsService.init(serverUrl);\n\n    // Subscribe to connection status updates\n    const statusUnsubscribe = wsService.subscribeToStatus((newStatus) => {\n      setStatus(newStatus);\n    });\n\n    // Subscribe to messages\n    const messageUnsubscribe = wsService.subscribeToMessages((message) => {\n      if (message.type === 'message' || message.type === 'system' || message.type === 'error') {\n        setMessages(prev => [...prev, message]);\n      } else if (message.type === 'provider_status') {\n        // Update provider status\n        const update = message.payload as ProviderStatusUpdate;\n        setProviderStatus(prev => {\n          const existingIndex = prev.findIndex(p => p.providerId === update.providerId);\n          if (existingIndex >= 0) {\n            const updatedList = [...prev];\n            updatedList[existingIndex] = update;\n            return updatedList;\n          } else {\n            return [...prev, update];\n          }\n        });\n      }\n      // Note: 'typing' events are handled directly by components that need them\n    });\n\n    // Cleanup on unmount\n    return () => {\n      statusUnsubscribe();\n      messageUnsubscribe();\n      wsService.disconnect();\n    };\n  }, [serverUrl]);\n\n  // Function to send a message through the WebSocket\n  const sendMessage = (eventName: string, data: any) => {\n    // Create message object with type and data\n    const message = {\n      type: eventName,\n      data: data\n    };\n    wsService.sendMessage(message);\n  };\n\n  // Function to clear message history\n  const clearMessages = () => {\n    setMessages([]);\n  };\n\n  return (\n    <WebSocketContext.Provider value={{ \n      status, \n      sendMessage, \n      messages,\n      providerStatus,\n      clearMessages\n    }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\n/**\n * Custom hook for consuming the WebSocket context\n */\nexport const useWebSocket = () => useContext(WebSocketContext);\n\nexport default WebSocketContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}