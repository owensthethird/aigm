{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadow\\\\Documents\\\\Cursor\\\\aiGM\\\\ui\\\\src\\\\contexts\\\\GameStateContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback } from 'react';\n\n// Game state types based on interface design\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  gameId: null,\n  sessionName: 'Untitled Session',\n  status: 'idle',\n  characters: [],\n  activeCharacterId: null,\n  events: [],\n  currentLocation: '',\n  gameRules: '',\n  gameSystem: '',\n  lastUpdateTime: Date.now()\n};\nconst GameStateContext = /*#__PURE__*/createContext(undefined);\nexport const GameStateProvider = ({\n  children\n}) => {\n  _s();\n  const [gameState, setGameState] = useState(() => {\n    // Try to load from localStorage\n    const savedState = localStorage.getItem('aigm-game-state');\n    return savedState ? JSON.parse(savedState) : initialGameState;\n  });\n\n  // Save to localStorage whenever game state changes\n  const updateGameState = useCallback(updates => {\n    setGameState(prevState => {\n      const newState = {\n        ...prevState,\n        ...updates,\n        lastUpdateTime: Date.now()\n      };\n      localStorage.setItem('aigm-game-state', JSON.stringify(newState));\n      return newState;\n    });\n  }, []);\n\n  // Game management functions\n  const startGame = useCallback((sessionName, gameSystem) => {\n    updateGameState({\n      gameId: `game_${Date.now()}`,\n      sessionName,\n      gameSystem,\n      status: 'active',\n      events: [{\n        id: `event_${Date.now()}`,\n        timestamp: Date.now(),\n        type: 'game_start',\n        description: `Game session \"${sessionName}\" started`\n      }]\n    });\n  }, [updateGameState]);\n  const pauseGame = useCallback(() => {\n    updateGameState({\n      status: 'paused',\n      events: [...gameState.events, {\n        id: `event_${Date.now()}`,\n        timestamp: Date.now(),\n        type: 'game_paused',\n        description: 'Game session paused'\n      }]\n    });\n  }, [gameState.events, updateGameState]);\n  const resumeGame = useCallback(() => {\n    updateGameState({\n      status: 'active',\n      events: [...gameState.events, {\n        id: `event_${Date.now()}`,\n        timestamp: Date.now(),\n        type: 'game_resumed',\n        description: 'Game session resumed'\n      }]\n    });\n  }, [gameState.events, updateGameState]);\n  const endGame = useCallback(() => {\n    updateGameState({\n      status: 'idle',\n      events: [...gameState.events, {\n        id: `event_${Date.now()}`,\n        timestamp: Date.now(),\n        type: 'game_ended',\n        description: 'Game session ended'\n      }]\n    });\n  }, [gameState.events, updateGameState]);\n\n  // Character management functions\n  const addCharacter = useCallback(character => {\n    updateGameState({\n      characters: [...gameState.characters, character],\n      events: [...gameState.events, {\n        id: `event_${Date.now()}`,\n        timestamp: Date.now(),\n        type: 'character_added',\n        description: `Character \"${character.name}\" added to the game`,\n        affectedEntities: [character.id]\n      }]\n    });\n  }, [gameState.characters, gameState.events, updateGameState]);\n  const removeCharacter = useCallback(characterId => {\n    const character = gameState.characters.find(c => c.id === characterId);\n    if (!character) return;\n    updateGameState({\n      characters: gameState.characters.filter(c => c.id !== characterId),\n      activeCharacterId: gameState.activeCharacterId === characterId ? null : gameState.activeCharacterId,\n      events: [...gameState.events, {\n        id: `event_${Date.now()}`,\n        timestamp: Date.now(),\n        type: 'character_removed',\n        description: `Character \"${character.name}\" removed from the game`,\n        affectedEntities: [characterId]\n      }]\n    });\n  }, [gameState.characters, gameState.activeCharacterId, gameState.events, updateGameState]);\n  const setActiveCharacter = useCallback(characterId => {\n    const character = gameState.characters.find(c => c.id === characterId);\n    if (!character) return;\n    updateGameState({\n      activeCharacterId: characterId,\n      events: [...gameState.events, {\n        id: `event_${Date.now()}`,\n        timestamp: Date.now(),\n        type: 'active_character_changed',\n        description: `Active character changed to \"${character.name}\"`,\n        affectedEntities: [characterId]\n      }]\n    });\n  }, [gameState.characters, gameState.events, updateGameState]);\n\n  // Event management\n  const addGameEvent = useCallback(event => {\n    const newEvent = {\n      ...event,\n      id: `event_${Date.now()}`,\n      timestamp: Date.now()\n    };\n    updateGameState({\n      events: [...gameState.events, newEvent]\n    });\n  }, [gameState.events, updateGameState]);\n  return /*#__PURE__*/_jsxDEV(GameStateContext.Provider, {\n    value: {\n      gameState,\n      updateGameState,\n      startGame,\n      pauseGame,\n      resumeGame,\n      endGame,\n      addCharacter,\n      removeCharacter,\n      setActiveCharacter,\n      addGameEvent\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(GameStateProvider, \"BrMgB1dwRgJ3vlqIApkYxLuIz8s=\");\n_c = GameStateProvider;\nexport const useGameState = () => {\n  _s2();\n  const context = useContext(GameStateContext);\n  if (context === undefined) {\n    throw new Error('useGameState must be used within a GameStateProvider');\n  }\n  return context;\n};\n_s2(useGameState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameStateProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","jsxDEV","_jsxDEV","initialGameState","gameId","sessionName","status","characters","activeCharacterId","events","currentLocation","gameRules","gameSystem","lastUpdateTime","Date","now","GameStateContext","undefined","GameStateProvider","children","_s","gameState","setGameState","savedState","localStorage","getItem","JSON","parse","updateGameState","updates","prevState","newState","setItem","stringify","startGame","id","timestamp","type","description","pauseGame","resumeGame","endGame","addCharacter","character","name","affectedEntities","removeCharacter","characterId","find","c","filter","setActiveCharacter","addGameEvent","event","newEvent","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGameState","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Shadow/Documents/Cursor/aiGM/ui/src/contexts/GameStateContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode, useCallback } from 'react';\n\n// Game state types based on interface design\nexport type GameStatus = 'idle' | 'active' | 'processing' | 'paused';\nexport type CharacterType = 'player' | 'npc' | 'enemy';\n\nexport interface Character {\n  id: string;\n  name: string;\n  type: CharacterType;\n  stats?: Record<string, any>;\n  inventory?: any[];\n  description?: string;\n  imageUrl?: string;\n}\n\nexport interface GameEvent {\n  id: string;\n  timestamp: number;\n  type: string;\n  description: string;\n  affectedEntities?: string[];\n  metadata?: Record<string, any>;\n}\n\ninterface GameState {\n  gameId: string | null;\n  sessionName: string;\n  status: GameStatus;\n  characters: Character[];\n  activeCharacterId: string | null;\n  events: GameEvent[];\n  currentLocation: string;\n  gameRules: string;\n  gameSystem: string;\n  lastUpdateTime: number;\n}\n\nconst initialGameState: GameState = {\n  gameId: null,\n  sessionName: 'Untitled Session',\n  status: 'idle',\n  characters: [],\n  activeCharacterId: null,\n  events: [],\n  currentLocation: '',\n  gameRules: '',\n  gameSystem: '',\n  lastUpdateTime: Date.now()\n};\n\ninterface GameStateContextType {\n  gameState: GameState;\n  updateGameState: (updates: Partial<GameState>) => void;\n  startGame: (sessionName: string, gameSystem: string) => void;\n  pauseGame: () => void;\n  resumeGame: () => void;\n  endGame: () => void;\n  addCharacter: (character: Character) => void;\n  removeCharacter: (characterId: string) => void;\n  setActiveCharacter: (characterId: string) => void;\n  addGameEvent: (event: Omit<GameEvent, 'id' | 'timestamp'>) => void;\n}\n\nconst GameStateContext = createContext<GameStateContextType | undefined>(undefined);\n\ninterface GameStateProviderProps {\n  children: ReactNode;\n}\n\nexport const GameStateProvider: React.FC<GameStateProviderProps> = ({ children }) => {\n  const [gameState, setGameState] = useState<GameState>(() => {\n    // Try to load from localStorage\n    const savedState = localStorage.getItem('aigm-game-state');\n    return savedState ? JSON.parse(savedState) : initialGameState;\n  });\n\n  // Save to localStorage whenever game state changes\n  const updateGameState = useCallback((updates: Partial<GameState>) => {\n    setGameState(prevState => {\n      const newState = { ...prevState, ...updates, lastUpdateTime: Date.now() };\n      localStorage.setItem('aigm-game-state', JSON.stringify(newState));\n      return newState;\n    });\n  }, []);\n\n  // Game management functions\n  const startGame = useCallback((sessionName: string, gameSystem: string) => {\n    updateGameState({\n      gameId: `game_${Date.now()}`,\n      sessionName,\n      gameSystem,\n      status: 'active',\n      events: [\n        {\n          id: `event_${Date.now()}`,\n          timestamp: Date.now(),\n          type: 'game_start',\n          description: `Game session \"${sessionName}\" started`\n        }\n      ]\n    });\n  }, [updateGameState]);\n\n  const pauseGame = useCallback(() => {\n    updateGameState({ \n      status: 'paused',\n      events: [\n        ...gameState.events,\n        {\n          id: `event_${Date.now()}`,\n          timestamp: Date.now(),\n          type: 'game_paused',\n          description: 'Game session paused'\n        }\n      ]\n    });\n  }, [gameState.events, updateGameState]);\n\n  const resumeGame = useCallback(() => {\n    updateGameState({ \n      status: 'active',\n      events: [\n        ...gameState.events,\n        {\n          id: `event_${Date.now()}`,\n          timestamp: Date.now(),\n          type: 'game_resumed',\n          description: 'Game session resumed'\n        }\n      ]\n    });\n  }, [gameState.events, updateGameState]);\n\n  const endGame = useCallback(() => {\n    updateGameState({ \n      status: 'idle',\n      events: [\n        ...gameState.events,\n        {\n          id: `event_${Date.now()}`,\n          timestamp: Date.now(),\n          type: 'game_ended',\n          description: 'Game session ended'\n        }\n      ]\n    });\n  }, [gameState.events, updateGameState]);\n\n  // Character management functions\n  const addCharacter = useCallback((character: Character) => {\n    updateGameState({ \n      characters: [...gameState.characters, character],\n      events: [\n        ...gameState.events,\n        {\n          id: `event_${Date.now()}`,\n          timestamp: Date.now(),\n          type: 'character_added',\n          description: `Character \"${character.name}\" added to the game`,\n          affectedEntities: [character.id]\n        }\n      ]\n    });\n  }, [gameState.characters, gameState.events, updateGameState]);\n\n  const removeCharacter = useCallback((characterId: string) => {\n    const character = gameState.characters.find(c => c.id === characterId);\n    if (!character) return;\n    \n    updateGameState({ \n      characters: gameState.characters.filter(c => c.id !== characterId),\n      activeCharacterId: gameState.activeCharacterId === characterId ? null : gameState.activeCharacterId,\n      events: [\n        ...gameState.events,\n        {\n          id: `event_${Date.now()}`,\n          timestamp: Date.now(),\n          type: 'character_removed',\n          description: `Character \"${character.name}\" removed from the game`,\n          affectedEntities: [characterId]\n        }\n      ]\n    });\n  }, [gameState.characters, gameState.activeCharacterId, gameState.events, updateGameState]);\n\n  const setActiveCharacter = useCallback((characterId: string) => {\n    const character = gameState.characters.find(c => c.id === characterId);\n    if (!character) return;\n    \n    updateGameState({ \n      activeCharacterId: characterId,\n      events: [\n        ...gameState.events,\n        {\n          id: `event_${Date.now()}`,\n          timestamp: Date.now(),\n          type: 'active_character_changed',\n          description: `Active character changed to \"${character.name}\"`,\n          affectedEntities: [characterId]\n        }\n      ]\n    });\n  }, [gameState.characters, gameState.events, updateGameState]);\n\n  // Event management\n  const addGameEvent = useCallback((event: Omit<GameEvent, 'id' | 'timestamp'>) => {\n    const newEvent: GameEvent = {\n      ...event,\n      id: `event_${Date.now()}`,\n      timestamp: Date.now()\n    };\n    \n    updateGameState({\n      events: [...gameState.events, newEvent]\n    });\n  }, [gameState.events, updateGameState]);\n\n  return (\n    <GameStateContext.Provider value={{\n      gameState,\n      updateGameState,\n      startGame,\n      pauseGame,\n      resumeGame,\n      endGame,\n      addCharacter,\n      removeCharacter,\n      setActiveCharacter,\n      addGameEvent\n    }}>\n      {children}\n    </GameStateContext.Provider>\n  );\n};\n\nexport const useGameState = (): GameStateContextType => {\n  const context = useContext(GameStateContext);\n  if (context === undefined) {\n    throw new Error('useGameState must be used within a GameStateProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}